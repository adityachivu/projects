function [W1, W2] = randMatrixTrain(X, y, K)

%
%
%	Perfrom PCA on MNIST dataset and train using Random Matrix.
%

[m, n] = size(X);

%	Identify Principal Components using SVD
Sigma = (1/m) * X' * X;
[U, S, V] = svd(Sigma);

%	Retain top K components
U_reduce = U(:, 1:K);
Z = X * U_reduce;

%	Use pseudo-inverse to learn weights of SLP network.
Y = zeros(m, 10);
for i = 1:m
	Y(i, y(i)) = 1;
end
%	Weights trained by pseudo-inverse.
W1 = pinv(Z) * Y;

%	Weights generated by random Gaussian Matrix.
W2 = stdnormal_rnd(size(W1));

end
%	END
